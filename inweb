#!/usr/bin/env bash
set -euo pipefail

# install_panel.sh
# Script instalador de dependencias y despliegue de un panel web básico (Flask + gunicorn + nginx).
# Soporta Debian/Ubuntu y CentOS/RHEL.
# Uso: sudo ./install_panel.sh [dominio_o_ip]

# --------------------------
# Helpers
# --------------------------
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

info() { echo -e "${GREEN}[INFO]${NC} $1"; }
warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1"; }

ensure_root() {
  if [ "$(id -u)" -ne 0 ]; then
    error "Este script debe ejecutarse como root. Usa sudo."
    exit 1
  fi
}

# --------------------------
# Variables
# --------------------------
SERVER_NAME="${1:-}"   # opcional: dominio o IP pasado por argumento
PANEL_DIR="/opt/simple-panel"
CREDS_FILE="/root/panel_credentials.txt"
PYTHON_BIN="/usr/bin/python3"
VENV_DIR="$PANEL_DIR/venv"
SYSTEMD_SERVICE="/etc/systemd/system/simple-panel.service"
NGINX_CONF="/etc/nginx/sites-available/simple-panel"
NGINX_LINK="/etc/nginx/sites-enabled/simple-panel"

# --------------------------
# Validaciones iniciales
# --------------------------
ensure_root
info "Iniciando instalador del panel web básico..."
if [ -n "$SERVER_NAME" ]; then
  info "Servidor objetivo configurado como: $SERVER_NAME"
fi

# Detect distro
if [ -f /etc/os-release ]; then
  . /etc/os-release
  DISTRO_ID="${ID,,}"
  DISTRO_NAME="${NAME}"
else
  error "No se pudo detectar la distribución Linux."
  exit 1
fi

info "Distribución detectada: $DISTRO_NAME ($DISTRO_ID)"

# --------------------------
# Instalar paquetes básicos
# --------------------------
install_deps_debian() {
  info "Actualizando repositorios (apt)..."
  apt-get update -y
  info "Instalando dependencias: nginx, python3, python3-venv, python3-pip, git, build-essential..."
  apt-get install -y nginx python3 python3-venv python3-pip git curl openssl
  # ufw (firewall)
  apt-get install -y ufw || warn "ufw no instalado (continuando)..."
}

install_deps_centos() {
  info "Actualizando repositorios (yum/dnf)..."
  if command -v dnf >/dev/null 2>&1; then
    dnf -y update
    dnf -y install epel-release
    dnf -y install nginx python3 python3-venv python3-pip git curl openssl
  else
    yum -y update
    yum -y install epel-release
    yum -y install nginx python3 python3-venv python3-pip git curl openssl
  fi
  # firewalld
  yum -y install firewalld || warn "firewalld no instalado (continuando)..."
}

case "$DISTRO_ID" in
  ubuntu|debian)
    install_deps_debian
    FIREWALL_TYPE="ufw"
    ;;
  centos|rhel|rocky|almalinux)
    install_deps_centos
    FIREWALL_TYPE="firewalld"
    ;;
  *)
    warn "Distribución no probada directamente. Intentaré usar apt-get como predeterminado."
    if command -v apt-get >/dev/null 2>&1; then
      install_deps_debian
      FIREWALL_TYPE="ufw"
    else
      error "No se detectó gestor de paquetes compatible (apt/yum/dnf)."
      exit 1
    fi
    ;;
esac

# --------------------------
# Abrir/asegurar puertos: SSH (22), HTTP (80), HTTPS (443)
# --------------------------
info "Configurando firewall y abriendo puertos necesarios (SSH, HTTP, HTTPS)..."

if [ "$FIREWALL_TYPE" = "ufw" ]; then
  if ! command -v ufw >/dev/null 2>&1; then
    warn "ufw no disponible. Omitiendo configuración ufw."
  else
    ufw allow OpenSSH || true
    ufw allow 80/tcp || true
    ufw allow 443/tcp || true
    ufw --force enable || true
    info "ufw configurado (puertos 22,80,443 abiertos)."
  fi
else
  # firewalld
  if systemctl list-unit-files | grep -q firewalld; then
    systemctl enable --now firewalld || true
    firewall-cmd --permanent --add-service=ssh || true
    firewall-cmd --permanent --add-service=http || true
    firewall-cmd --permanent --add-service=https || true
    firewall-cmd --reload || true
    info "firewalld configurado (puertos 22,80,443 abiertos)."
  else
    warn "No se detectó firewalld, omitiendo reglas de firewall."
  fi
fi

# --------------------------
# Crear usuario/password admin para el panel
# --------------------------
info "Generando credenciales administrativas para el panel..."

ADMIN_USER="admin"
# Generar contraseña aleatoria segura (base64) y eliminar caracteres / para evitar problemas
ADMIN_PASS="$(openssl rand -base64 18 | tr -dc 'A-Za-z0-9' | cut -c1-16)"
# Guarda credenciales
mkdir -p "$(dirname "$CREDS_FILE")"
cat > "$CREDS_FILE" <<EOF
PANEL ADMIN CREDENTIALS
Usuario: $ADMIN_USER
Contraseña: $ADMIN_PASS
Directorio del panel: $PANEL_DIR
EOF
chmod 600 "$CREDS_FILE"
info "Credenciales generadas y guardadas en $CREDS_FILE"

# --------------------------
# Crear estructura del panel (Flask)
# --------------------------
info "Creando directorio del panel en $PANEL_DIR..."
if [ -d "$PANEL_DIR" ]; then
  warn "$PANEL_DIR ya existe. Se intentará actualizar/reescribir algunos archivos."
else
  mkdir -p "$PANEL_DIR"
fi
chown root:root "$PANEL_DIR"
chmod 755 "$PANEL_DIR"

info "Creando entorno virtual de Python..."
$PYTHON_BIN -m venv "$VENV_DIR"
# Activar e instalar dependencias
source "$VENV_DIR/bin/activate"
pip install --upgrade pip
pip install wheel
pip install flask gunicorn werkzeug

# --------------------------
# Crear archivo de configuración con hash de contraseña
# --------------------------
info "Creando fichero de configuración con usuario y hash de contraseña..."
python3 - <<PY
from werkzeug.security import generate_password_hash
import json,sys
admin_user = "${ADMIN_USER}"
admin_pass = "${ADMIN_PASS}"
hashed = generate_password_hash(admin_pass)
cfg = {"admin_user": admin_user, "admin_hash": hashed}
open("${PANEL_DIR}/panel_config.json","w").write(json.dumps(cfg))
print("Hash guardado en ${PANEL_DIR}/panel_config.json")
PY

# --------------------------
# Escribir aplicación Flask básica
# --------------------------
info "Escribiendo aplicación Flask minimalista en $PANEL_DIR/app.py ..."
cat > "$PANEL_DIR/app.py" <<'PYAPP'
from flask import Flask, request, render_template_string, redirect, url_for, session
import json
from werkzeug.security import check_password_hash
import os

BASE = os.path.dirname(__file__)
cfg_path = os.path.join(BASE, "panel_config.json")
with open(cfg_path) as f:
    cfg = json.load(f)

ADMIN_USER = cfg.get("admin_user")
ADMIN_HASH = cfg.get("admin_hash")

app = Flask(__name__)
app.secret_key = os.urandom(24)

LOGIN_HTML = """
<!doctype html>
<title>Panel</title>
<h2>Login - Panel Básico</h2>
<form method=post>
  <label>Usuario</label><br>
  <input name=username><br>
  <label>Contraseña</label><br>
  <input name=password type=password><br><br>
  <button type=submit>Entrar</button>
</form>
"""

DASH_HTML = """
<!doctype html>
<title>Panel</title>
<h2>Dashboard</h2>
<p>Bienvenido, {{ user }}!</p>
<ul>
  <li>Estado: <strong>En línea</strong></li>
  <li>Servicios: nginx, gunicorn</li>
  <li>Directorio del panel: {{ base }}</li>
</ul>
<form method=post action="{{ url_for('logout') }}">
  <button type=submit>Salir</button>
</form>
"""

@app.route('/', methods=['GET','POST'])
def login():
    if request.method == 'POST':
        u = request.form.get('username','')
        p = request.form.get('password','')
        if u == ADMIN_USER and check_password_hash(ADMIN_HASH, p):
            session['user'] = u
            return redirect(url_for('dashboard'))
        return render_template_string(LOGIN_HTML + "<p style='color:red'>Credenciales inválidas</p>")
    if 'user' in session:
        return redirect(url_for('dashboard'))
    return render_template_string(LOGIN_HTML)

@app.route('/dashboard')
def dashboard():
    if 'user' not in session:
        return redirect(url_for('login'))
    return render_template_string(DASH_HTML, user=session['user'], base=BASE)

@app.route('/logout', methods=['POST'])
def logout():
    session.pop('user', None)
    return redirect(url_for('login'))

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8000)
PYAPP

# Establecer permisos
chown -R root:root "$PANEL_DIR"
chmod -R 755 "$PANEL_DIR"

# --------------------------
# Crear systemd service para gunicorn
# --------------------------
info "Creando servicio systemd para ejecutar gunicorn..."
cat > "$SYSTEMD_SERVICE" <<EOF
[Unit]
Description=Simple Panel (gunicorn)
After=network.target

[Service]
User=root
Group=root
WorkingDirectory=$PANEL_DIR
Environment="PATH=$VENV_DIR/bin"
ExecStart=$VENV_DIR/bin/gunicorn --workers 3 --bind unix:$PANEL_DIR/panel.sock wsgi:app

[Install]
WantedBy=multi-user.target
EOF

# Crear wsgi.py requerido por gunicorn
cat > "$PANEL_DIR/wsgi.py" <<'WSGI'
from app import app

if __name__ == "__main__":
    app.run()
WSGI

# Recargar systemd y arrancar servicio
systemctl daemon-reload
systemctl enable --now simple-panel.service || { warn "No se pudo iniciar el servicio simple-panel.service inmediatamente."; }

# --------------------------
# Configurar nginx como reverse proxy
# --------------------------
info "Configurando nginx para servir el panel (reverse proxy a gunicorn)..."

NGINX_CONF_CONTENT="server {
    listen 80;
    server_name ${SERVER_NAME:-_};

    location / {
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header Host \$http_host;
        proxy_redirect off;
        proxy_pass http://unix:$PANEL_DIR/panel.sock;
    }
}
"

# Escribe archivo de configuración según distro
if [ -d /etc/nginx/sites-available ]; then
  echo "$NGINX_CONF_CONTENT" > "$NGINX_CONF"
  ln -sf "$NGINX_CONF" "$NGINX_LINK"
  # Deshabilitar default site si existe
  if [ -f /etc/nginx/sites-enabled/default ]; then
    rm -f /etc/nginx/sites-enabled/default || true
  fi
else
  # sistemas sin sites-available (ej: algunos CentOS)
  echo "$NGINX_CONF_CONTENT" > /etc/nginx/conf.d/simple-panel.conf
fi

# Probar config y recargar nginx
nginx -t && systemctl enable --now nginx || warn "nginx no pudo habilitarse o iniciarse automáticamente."

# --------------------------
# Información final y verificación
# --------------------------
IP_DETECTADA="$(hostname -I 2>/dev/null | awk '{print $1}' || true)"
if [ -z "$SERVER_NAME" ]; then
  SERVER_NAME="${IP_DETECTADA:-$(hostname)}"
fi

info "Verificando estado de servicios..."
systemctl is-active --quiet simple-panel.service && info "Servicio simple-panel: activo" || warn "Servicio simple-panel: no activo"
systemctl is-active --quiet nginx && info "nginx: activo" || warn "nginx: no activo"

echo
echo -e "${GREEN}INSTALACIÓN COMPLETADA${NC}"
echo "Accede al panel en: http://$SERVER_NAME/"
echo "Credenciales de administrador guardadas en: $CREDS_FILE"
echo "Revisa el log del servicio: journalctl -u simple-panel.service -f"
echo
info "Protocolos/puertos configurados en el servidor:"
echo "- SSH (22) - protocolo SSH (usado para administrar el VPS)"
echo "- HTTP (80) - protocolo HTTP (nginx reverse proxy al panel)"
echo "- HTTPS (443) - disponible si configuras certbot/SSL manualmente"
echo
info "Siguientes pasos recomendados:"
echo "1) Si tienes un dominio, configura DNS y añade el dominio como argumento al script en una re-ejecución o edita $NGINX_CONF (server_name)."
echo "2) Para SSL: instala certbot y configura un certificado para el dominio."
echo "3) Haz cambios de seguridad: crea un usuario no-root para ejecutar el servicio en lugar de root, habilita fail2ban, restringe ufw/iptable."
echo
info "El siguiente script que prepararás (parche) podrá actualizar el panel y añadir nuevas funciones, mejoras y diseños."
